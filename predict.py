# -*- coding: utf-8 -*-
"""ImageClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fr6M1_Q7e0pqYZWetLvOJSAv7WxKFi_9
"""


import tensorflow as tf
print("Num GPUs Available:", len(tf.config.list_physical_devices('GPU')))

import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt
import json
from PIL import Image

dataset, dataset_info = tfds.load('oxford_flowers102', as_supervised=True, with_info=True)

train_ds = dataset['train']
val_ds   = dataset['validation']
test_ds  = dataset['test']

print("Number of classes:", dataset_info.features['label'].num_classes)

def format_image(image, label):
    image = tf.image.resize(image, (224,224))
    image = tf.cast(image, tf.float32) / 255.0
    return image, label

BATCH_SIZE = 32
train_batches = train_ds.map(format_image).shuffle(1000).batch(BATCH_SIZE)
val_batches   = val_ds.map(format_image).batch(BATCH_SIZE)
test_batches  = test_ds.map(format_image).batch(BATCH_SIZE)

feature_extractor_url = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4"
feature_extractor_layer = hub.KerasLayer(feature_extractor_url,
                                         input_shape=(224,224,3),
                                         trainable=False)

import tensorflow as tf
import tensorflow_hub as hub

num_classes = dataset_info.features['label'].num_classes

def hub_layer(x):
    hub_module = hub.load("https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4")
    return hub_module(x)

inputs = tf.keras.Input(shape=(224,224,3))
x = tf.keras.layers.Lambda(hub_layer)(inputs)
x = tf.keras.layers.Dropout(0.2)(x)
outputs = tf.keras.layers.Dense(num_classes, activation='softmax')(x)
model = tf.keras.Model(inputs, outputs)

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(
    train_batches,
    validation_data=val_batches,
    epochs=5
)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

test_loss, test_acc = model.evaluate(test_batches)
print(f"\n Test Accuracy: {test_acc:.2f}")
print(f"Test Loss: {test_loss:.2f}")

model.save('flower_model.h5')
print(" Model saved as flower_model.h5")

import json

with open('cat_to_name.json', 'r') as f:
    class_names = json.load(f)

print(" Loaded category names successfully!")
print(list(class_names.items())[:5])

from PIL import Image
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

def process_image(image):
    image = tf.convert_to_tensor(image)
    image = tf.image.resize(image, (224,224))
    image = image / 255.0
    return image.numpy()

def predict(image_path, model, top_k=5):
    img = Image.open(image_path)
    processed = process_image(np.asarray(img))
    preds = model.predict(np.expand_dims(processed, axis=0))
    top_k_probs, top_k_classes = tf.nn.top_k(preds, k=top_k)
    return top_k_probs.numpy()[0], top_k_classes.numpy()[0]

image_path = 'rose.jpg'
probs, classes = predict(image_path, model)

plt.imshow(Image.open(image_path))
plt.title(class_names[str(classes[0])])
plt.show()

for i in range(len(probs)):
    print(f"{class_names[str(classes[i])]}: {probs[i]*100:.2f}%")

